{"version":3,"sources":["services/entry.js","components/Display.js","components/Form.js","components/Filter.js","App.js","serviceWorker.js","index.js"],"names":["baseUrl","axios","get","newObject","post","id","console","log","put","delete","noEntryStyle","color","namesToDisplay","persons","length","map","person","key","className","name","number","onClick","entryService","style","Form","addName","newName","newNumber","handleName","handleNumber","onSubmit","value","onChange","type","Filter","App","useState","people","setPersons","setNewName","setNewNumber","setFiltered","useEffect","interval","setInterval","then","dbInitial","data","clearInterval","event","target","toLowerCase","filtered","filter","trim","includes","preventDefault","nameExists","find","bookEntry","entryObject","dateAdded","Date","toISOString","undefined","concat","window","alert","Display","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.0e4e0078.chunk.js","sourcesContent":["import axios from 'axios'\nconst baseUrl = 'https://still-escarpment-23839.herokuapp.com/api/persons'\n\nconst getAll = () => {\n    return axios.get(baseUrl)\n}\n\nconst create = newObject => {\n    return axios.post(baseUrl, newObject)\n}\n\nconst update = (id, newObject) => {\n    console.log(\"Updated\")\n    return axios.put(`${baseUrl}/${id}`, newObject)\n}\n\nconst toDelete = (id) => {\n    console.log(`Deleting ${id}`)\n    return axios.delete(`${baseUrl}/${id}`)\n}\n\nexport default {getAll, create, update, toDelete}","import React from 'react'\nimport entryService from '../services/entry'\n\nconst noEntryStyle = {color: 'red'}\n\nconst namesToDisplay = ({persons}) => {\n    if (persons.length > 0) {\n        return (\n            <div>\n                <h2> All Entries </h2>\n                <ul>\n                    {persons.map(person => \n                    <li key={person.id} className='person'>\n                        {person.name} ({person.id}): {person.number}   \n                        <button onClick={() => entryService.toDelete(person.id)}>\n                            Delete\n                        </button>\n                    </li>)}\n                </ul>\n            </div>\n        )\n    }\n\n    else {\n        const element = <h3 style={noEntryStyle}> No Entries </h3>\n        return element\n    }\n}\n\nexport default namesToDisplay","import React from 'react'\n\n\nconst Form = ({addName, newName, newNumber, handleName, handleNumber}) => {\n    return (\n        <form onSubmit={addName}>\n            <div>\n                Name:   \n                <input\n                    value={newName}\n                    onChange={handleName}\n                />\n            </div>\n\n            <div>\n                Number:\n                <input\n                    value={newNumber}\n                    onChange={handleNumber}\n                />\n            </div>\n\n            <div>\n                <button type=\"submit\">\n                    Add\n                </button>\n            </div>\n        </form>\n    )\n}\n\nexport default Form","import React from 'react'\n\nconst Filter = ({onChange}) => {\n    return (\n        <form>\n            Filter:\n            <input \n                type=\"text\"\n                onChange={onChange}\n            />\n        </form>\n    )\n}\n\nexport default Filter","import React, { useState, useEffect } from 'react'\nimport Display from './components/Display'\nimport Form from './components/Form'\nimport Filter from './components/Filter'\nimport entryService from './services/entry'\n\nconst App = () => {\n  const [ people, setPersons ] = useState([]) \n  const [ newName, setNewName ] = useState('')\n  const [ newNumber, setNewNumber] = useState('')\n  const [ filteredPersons, setFiltered] = useState()\n\n  useEffect( () => {\n    const interval = setInterval(() => {\n      entryService\n        .getAll()\n        .then(dbInitial => {setPersons(dbInitial.data)})\n      console.log(\"Updating every 2s\")\n    }, 2000);\n    return () => clearInterval(interval)\n  }, [])\n\n  const addName = (event) => {\n    event.preventDefault()\n    console.log(\"Clicked!\")\n\n    //if name doesn't exist\n    const nameExists = people.find(bookEntry => bookEntry.name === newName)\n    const entryObject = {\n      name: newName,\n      dateAdded: new Date().toISOString(),\n      id: people.length+1,\n      number: newNumber\n    }\n\n    //-1 from every id because indeces are off. Uses hashing to prevent duplicate IDs\n    if ( (people.find(person => person.id === entryObject.id)) !== undefined) {\n      entryObject.id = (entryObject.id*10)/2\n    }\n\n    if (nameExists === undefined & newName.length > 0) { \n      entryService\n        .create(entryObject)\n      setPersons(people.concat(entryObject))\n      setNewName('')\n      setNewNumber('')\n      console.log(\"Entry made:\", newName)\n    }\n    \n    else if (newName.length === 0) {\n      setNewName('')\n      window.alert(\"Invalid entry\")\n    }\n\n    else //update entry\n      if (nameExists.number === newNumber) {\n        window.alert(newName + \" Already exists!\")\n        setNewName('')\n        setNewNumber('')\n      }\n      else {\n        console.log(\"Updating\")\n        entryService.update(nameExists.id, entryObject)\n      }\n  }\n\n  const handleName = (event) => {\n    console.log(event.target.value)\n    setNewName(event.target.value)\n  }\n  \n  const handleNumber = (event) => {\n    console.log(event.target.value)\n    setNewNumber(event.target.value)\n  }\n\n  const handleEvent = (event) => {\n    console.log(event.target.value)\n    setFiltered=(event.target.value)\n  }\n\n  const filterPersons = (event) => {\n    const value = event.target.value.toLowerCase()\n    const filtered = people.filter(\n      person => person.name.toLowerCase().trim().includes(value)\n    )\n    setFiltered(filtered)\n  }\n\n  return (\n    <div>\n      <h1>Phonebook</h1>\n\n      <h3> Search </h3>\n      <Filter onChange={filterPersons}/>\n\n      <h3> Create Entry </h3>\n      <Form addName={addName} \n            newName={newName} \n            newNumber={newNumber} \n            handleName={handleName} \n            handleNumber={handleNumber}\n      />\n\n      <Display persons={people}/>\n    </div>\n  )\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}