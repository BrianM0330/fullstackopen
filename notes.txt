MongoDB, Express, React, Redux, GraphQL

General Javascript
npx create-react-app .
Use backticks (``) not '' for string templates
State hooks return [CURRENT_STATE, FUNCTION_UPDATES_THE_STATE]
HTTPS creates CORS error when using JSON-Server, use HTTP
Use { () => Object } to add objects to onClick
npm nodemon enables live-refresh

Part 1
    - Part C
        - Rendering the component
        - Sub components
        - Creating and maintaining state
        - Event handling (onClick, butttons)
        - Prop structuring/destructuring
        - Turning things into components
        - Creating refresh method to render page (less code bloat)
    - Part D
        - Using and maintaining separate states
        - StateHooks
        - Turning everything into a smaller component
        - Using arrays in JS for state
        - Conditional rendering
        - Debugging (use React extension)
Part 2
    - Part A
        - Using JS arrays and collections to render in React
        - Map function
        - Refactoring
        - Turning everything into a component
    - Part B
        - Adding custom functions on Forms, buttons, etc.
        - The event parameter in addNote is theh event that triggered it
        - newNote uses state from the form field and reflects the current input.
        - Conditional HTML
        - Creating and sending data using objects
        - Using event handlers and forms
    - Part C
        - Experience using axios dependancy
        - Promises: Object representing the eventual completion of an operation
            * Pending: Final value/operation is unavailable 
            * Fulfilled/Rejected
        - Using react effect hooks
            * Effects run after every completed render, but CAN be run on command
    - Part D
        - ... notation. ... gets an object's properties, anything after that is altered
            - const changedNote = { ...note, important: !note.important }
        - Handling front end -> backend synchronization using services + axios
        - Async, promises
Part 3
    - Part A
        - Express get methods take 2 params, HTML Requeust and how to Respond to it (response)
        - Can return things in JSON format using .json (baked into express)
        - JSON is returned as a STRING this way, not an object like in parts 1 and 2
            - Because of this, have to convert responses into proper types
        - Content-type headers are very important, backend wont bother if it isnt correct
        - Routing, middleware, data validation, JSON
    Part B
        - CORS allows applications to use data from multiple ports
            - CORS is a universal standard, use middleware for this project
        - Deployed back end, but need to tell react how to use the React frontend
                1. Do npm run build to create a "production build" of the frontend
                2. Copy the above directory into the BACKEND directory
                3. Tell expressJS (Backend) to use the BUILD folder with the line - app.use(express.static('build'))
                4. Can use scripts to automate a lot of this work, see FullStackOpen Part3/PartB/Streamlining
                    4a. Or look at part3/notes/package.json scripts for more concrete example
    Part C
        - MongoDB
            - Create a cluster for the project and connect using Application.
                - Need to run "Npm install mongoose" to handle the connections. See fso/part3/notes/mongo.js for example
            - Mongo technically doesn't need a schema for entries, but it's wise to do so
Part 4
    -Part A
        - Structure express components into separate folders. Controllers is the backend routes, models is DB schema, utils is stuff like logging, connectivity configs, etc.
        - Just look at app and index and piece things together
        - TESTING
            - God to have a file that holds testing functions (utils/for_testing.js)
            - Use jest for now bc it's made by FB and works with React pretty well
            - Jest expects testing FILES to have .test in the name (palin.test.js)
            - Start with "test" functions in a testing file. Configure properly (see FSO/part4/parta/testing Node apps)
            - To run single tests use flags. "npm test -- []" [] can be the string name ('like this') or the relative path to .test.js file
            - 
        - Async/Await
            - Magic, pretty intuitive
            - Much easier than using the complex .then syntax
            - Await ONLY works in async functions. Async functions are defined in the fn header. MUST  end with [FunctionName]()
                const main = async () => { ... } main ()
            - 
Part 6
    - Part A
        - Spread Syntax is the array that is referenced but it is represented as 3 dots. It DESTRUCTURES the array into its elements so it can be mutated, it's not the actual array being called.
            - numbers [1, 2, 3] ------ ...numbers is [1,2,3]. 
        - Using the Dispatch function from 'react-redux'
            - The STORE that dispatch() uses is defined in index.js
            - Using the store in Index with the Provider function, dispatch knows to use that store
            - useSelector-hook accesses the react store. 
        - How to actually use stores?
            - Use dispatch/store creation above ^
            - In the reducer must define the cases for DISPATCH.
                - When dispatch is called, something needs to happen that puts the data into the store. Use reducer switch cases.
                - Ex. Dispatch({type: TEST, content}) --> in the reducer, have a switch case that takes type: 'TEST' and {doesStuff}
            - Look at examples for examples on concatting, changing properties, etc.
        - Turning everything into components
            - Basically - App.JS just imports everything
            - Components -> Dispatch -> Reducer -> State
            - Layout is --> AnecdotesList and AnecdoteForm. Both of these use Reducer to dispatch stuff into redux state
    - Part B
        - Can combine reducers
        - Radio buttons and filtering
        - Redux DevTools extension
            - Needs to be installed using NPM in addition to the browser extension
    - Part C
        - Use axios and json-db to do the simple stuff
        - Look at how 'INIT_NOTES' and services/notes work together, it's clean and efficient
Part  7
    - Part A
    - Part B - Custom Hooks
        - Kind of like a traditional Java object. Uses hook internally
        - Access methods and hook state with hookName.function
        - https://usehooks.com/ // https://github.com/rehooks/awesome-react-hooks
Part 8 
    - https://graphql.org/learn/schema/
    - Every GraphQL Server using Apollo needs a Resolver.
        - A function that populates data for a single field in the schema.
        - The Resolver does the backend logic stuff, and must match the query (see index.js)
            - Resolvers have 4 parameters.
                * ROOT - the object passed into it
                * ARGS - specific query
            - Custom resolvers are pretty good! Default resolver matches the object fields and properties, but they can be 'redefined' in a custom resolver like in Author on L111
    - ApolloClient uses hooks for queries
        - useQuery hook is best used for doing a query when the component is rendered
        - useLazyQUery is best for when a query is done **as needed**
        - useMutation is used for.. mutations.
            - refetchQueries does a query whenever a user is added or a mutation is performed. Better than polling!
    - Using Cache Effectively
        - If the cache is being used by ApolloClient, the component won't refresh on its own.
            - Use pollInterval inside the useQuery hook and it will poll every X ms.
    - ApolloClient
        - result.data isn't instant. It has to load for a few hundred ms. Otherwise it just returns undefined
            - To fix this, handle (result.loading) in code. When  done, then result.data is accessible
            